;license:MIT
;(c) 2022 by qkumba

!cpu 6502

vettbl0
        !word   vet+$005             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
vettbl1
        !word   vet+$03d             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
vettbl2
        !word   vet+$077             ; offset
        !byte   $40                  ; bits left
        !byte   $c0                  ; bits fetched
vettbl3
        !word   vet+$0b3             ; offset
        !byte   $40                  ; bits left
        !byte   $c0                  ; bits fetched
vettbl4
        !word   vet+$0ed             ; offset
        !byte   $08                  ; bits left
        !byte   $b8                  ; bits fetched
vettbl5
        !word   vet+$124             ; offset
        !byte   $40                  ; bits left
        !byte   $80                  ; bits fetched

alltbl0
        !word   all+$005             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
alltbl1
        !word   all+$040             ; offset
        !byte   $08                  ; bits left
        !byte   $d0                  ; bits fetched
alltbl2
        !word   all+$07b             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
alltbl3
        !word   all+$0b6             ; offset
        !byte   $80                  ; bits left
        !byte   $80                  ; bits fetched
alltbl4
        !word   all+$0f2             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
alltbl5
        !word   all+$12e             ; offset
        !byte   $40                  ; bits left
        !byte   $c0                  ; bits fetched

!if >* != >vettbl0 {
  !error "tables span a page, ", vettbl0, " ", *
}

;------------------------------------------------------------------------------
; nth
;
; finds and returns nth word from vetted table
;
; in:    nstore (2 bytes) set to value of n
;          can technically be any 16-bit value, will be ANDed to 11 bits (0..2047)
; out:   gSolution (9 bytes) contains space-separated word
;------------------------------------------------------------------------------
nth
        lda    #<vetlocs
        sta    locstore
        lda    #>vetlocs
        sta    locstore + 1
.search
        ldy    #count_off
        sec
        lda    nstore
        sbc    (locstore), y
        tax
        iny
        lda    nstore + 1
        and    #7                    ; max 2048 words in vetted list
        sbc    (locstore), y
        bcc    .foundbase
        stx    nstore
        sta    nstore + 1
        tya                          ; = #locsize - 1
        adc    locstore
        sta    locstore
        bcc    .search
        inc    locstore + 1
        bne    .search               ; always

.foundbase
        jsr    copystate
        ldx    #$95                  ; STA ,X
        iny                          ; 0

tryvet
        stx    .copyop
        sty    .branchop + 1
        lda    #<vettbl0
        bcc    settblbase            ; always

;------------------------------------------------------------------------------
; exists
;
; check for existence of word in either list
;
; in:    cmpword (9 bytes) contains space-separated word
; out:   Z=1 if word was found in either list
;        Z=0 otherwise
;------------------------------------------------------------------------------
cmpword=<gActiveRow+5
exists
        lda    cmpword
        sta    nstore + 1
        and    #$1f
        asl                          ; *2
        sta    nstore
        asl                          ; *4
        adc    nstore                ; *6 (= *locsize)
        pha
        adc    #<(vetlocs - locsize)
        jsr    loccopy
        ldx    #$C9                  ; CMP
        ldy    #breakend - breakbeg
        jsr    tryvet
        jsr    checkres
        cmp    #1
        pla
        bcc    checkres
        adc    #<((alllocs - locsize) - 1)
        jsr    loccopy
        lda    #<alltbl0
        jsr    settblbase
checkres
        lda    nstore
        ora    nstore + 1
checkret
        rts

settblbase
        sta    tbl0ptr
        ldx    #>vettbl0
        stx    tbl0ptr + 1
        adc    #(num_tables - 1) * tblsize
        sta    tbl5ptr
;;      txa
;;      adc    #0
        stx    tbl5ptr + 1
        inc    nstore
        bne    read_payload
        inc    nstore + 1

read_payload
        lda    #0
        sta    depth
        sta    preflen

read_payload_r
        jsr    checkres
        beq    checkret
        inc    <gProgressIndicatorIndex
        lda    <gProgressIndicatorIndex
        and    #7
        lsr
        bcc    +
        tax
        lda    <sProgressIndicators, x
        ldy    #11
        sta    ($28), y
+       lda    depth
        cmp    #num_tables - 2
        bcs    .gotchildren
        ldx    tbl5ptr
        ldy    tbl5ptr + 1
        jsr    read_varint
        sta    num_children

.gotchildren
        lda    depth
        asl
        asl                          ; *tblsize
        adc    tbl0ptr
        tax
        ldy    tbl0ptr + 1
;;        bcc    +
;;        iny
+       jsr    read_varint
        adc    #'A' - 1
;;        tax
;;        lda    alphabet, x
        ldx    preflen
        sta    prefix, x
        lda    depth
        cmp    #num_tables - 2
        bne    .notword
        ldx    #word_size * 2
.copyprefix
        lda    prefix - 2, x
.copyop
        sta    gSolution - 2, x      ; opcode SMC
        eor    <cmpword - 2, x
.branchop
        bne    breakbeg              ; SMC
breakbeg
        dex
        dex
        bne    .copyprefix
        tay
        lda    .branchop + 1
        bne    zeroind
breakend
        ldy    nstore + 1
        ldx    nstore
        bne    +
        dey
+       dex
zeroind stx    nstore
        sty    nstore + 1
        rts

.notword
        pha
        lda    num_children
        pha
        lda    preflen
        pha
        inc    preflen
        inc    preflen
        inc    depth
        jsr    read_payload_r
        pla
        sta    preflen
        pla
        sta    num_children
        pla
        sta    depth
        dec    num_children
        bne    .notword
        rts

;;alphabet !text "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

read_int
        ldy    #0
        sty    value
        sty    value + 1

.shift
        lda    left
        bne    .updval
        lda    (offset), y
        inc    offset
        bne    +
        inc    offset + 1
+       sta    fetched
        sec
        rol    left

.updval
        asl    left
        asl    fetched
        rol    value
        rol    value + 1
        dex
        bne    .shift
        rts

read_varint
        stx    locstore
        sty    locstore + 1
        jsr    savestate
        ldx    #table_size
        jsr    read_int
        lda    value
        sta    num_items
        sta    index
        jsr    settblptr

.readtbl
        ldx    #word_size
        jsr    readcopy
        ldx    #8
        jsr    readcopy
        tax
        jsr    read_int              ; carry cleared
        jsr    copytblw
        dec    index
        bne    .readtbl
        sty    buf
        sty    buf + 1
        sty    bits
        jsr    reststate
--      inx                          ; 1
        jsr    read_int
        lsr    value
        rol    buf
        rol    buf + 1
        inc    bits
        jsr    settblptr
-       ldy    #key_off + 1
        lda    buf + 1
        cmp    (tblptr), y
        bne    +
        dey                          ; key_off
        lda    buf
        cmp    (tblptr), y
        bne    +
        dey                          ; bits_off
        lda    bits
        cmp    (tblptr), y
        bne    +
        dey                          ; value_off
        lda    (tblptr), y
        rts
+       clc
        lda    tblptr
        adc    #tblsize
        sta    tblptr
        bcc    +
        inc    tblptr + 1
+       inc    index
        lda    index
        eor    num_items
        bne    -
        sta    index
        beq    --                    ; always

savestate
        pla
        sta    .savejmp + 4
        pla
        sta    .savejmp + 1
        ldx    #statesize - 1
.pushstate
        lda    state, x
        pha
        dex
        bpl    .pushstate
.savejmp
        lda    #0                    ; SMC
        pha
        lda    #0                    ; SMC
        pha

copystate
        ldy    #statesize - 1
.copystate
        lda    (locstore), y
        sta    state, y
        dey
        bpl    .copystate
        rts

loccopy
        sta    locstore
        lda    #>(vetlocs - locsize)
        adc    #0
        sta    locstore + 1
        bcc    copystate             ; always

reststate
        pla
        sta    .restjmp + 4
        pla
        sta    .restjmp + 1
        ldx    #-statesize
.popstate
        pla
        sta    state + statesize, x
        inx
        bne    .popstate
.restjmp
        lda    #0                    ; SMC
        pha
        lda    #0                    ; SMC
        pha
        rts

settblptr
        lda    #<tempstor
        sta    tblptr
        lda    #>tempstor
        sta    tblptr + 1
        rts

readcopy
        jsr    read_int
-       sec
copytblw
        lda    value, x
        sta    (tblptr), y
        inc    tblptr
        bne    +
        inc    tblptr + 1
+       inx
        bcc    -
-       rts

vetlocs
;A words
        !word   vet+$152             ; offset
        !byte   $08                  ; bits left
        !byte   $20                  ; bits fetched
        !word   088                  ; count of entries
;B words
        !word   vet+$1f1             ; offset
        !byte   $02                  ; bits left
        !byte   $30                  ; bits fetched
        !word   176                  ; count of entries
;C words
        !word   vet+$2de             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   193                  ; count of entries
;D words
        !word   vet+$3d5             ; offset
        !byte   $08                  ; bits left
        !byte   $30                  ; bits fetched
        !word   103                  ; count of entries
;E words
        !word   vet+$471             ; offset
        !byte   $08                  ; bits left
        !byte   $20                  ; bits fetched
        !word   035                  ; count of entries
;F words
        !word   vet+$4b6             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   144                  ; count of entries
;G words
        !word   vet+$579             ; offset
        !byte   $04                  ; bits left
        !byte   $20                  ; bits fetched
        !word   095                  ; count of entries
;H words
        !word   vet+$5ff             ; offset
        !byte   $10                  ; bits left
        !byte   $30                  ; bits fetched
        !word   084                  ; count of entries
;I words
        !word   vet+$673             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   026                  ; count of entries
;J words
        !word   vet+$6a6             ; offset
        !byte   $08                  ; bits left
        !byte   $38                  ; bits fetched
        !word   012                  ; count of entries
;K words
        !word   vet+$6b8             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   013                  ; count of entries
;L words
        !word   vet+$6cd             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   094                  ; count of entries
;M words
        !word   vet+$752             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   113                  ; count of entries
;N words
        !word   vet+$7f2             ; offset
        !byte   $04                  ; bits left
        !byte   $34                  ; bits fetched
        !word   034                  ; count of entries
;O words
        !word   vet+$82d             ; offset
        !byte   $10                  ; bits left
        !byte   $20                  ; bits fetched
        !word   033                  ; count of entries
;P words
        !word   vet+$86d             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   145                  ; count of entries
;Q words
        !word   vet+$938             ; offset
        !byte   $08                  ; bits left
        !byte   $f0                  ; bits fetched
        !word   018                  ; count of entries
;R words
        !word   vet+$950             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   098                  ; count of entries
;S words
        !word   vet+$9de             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   235                  ; count of entries
;T words
        !word   vet+$b2c             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   131                  ; count of entries
;U words
        !word   vet+$be6             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   021                  ; count of entries
;V words
        !word   vet+$c0c             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   046                  ; count of entries
;W words
        !word   vet+$c5a             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   093                  ; count of entries
;there are no solutions starting with 'X'
;Y words
        !word   vet+$cda             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   013                  ; count of entries
;Z words
        !word   vet+$cf1             ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   005                  ; count of entries

alllocs
;A words
        !word   all+$174             ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   446                  ; count of entries
;B words
        !word   all+$3f3             ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   471                  ; count of entries
;C words
        !word   all+$636             ; offset
        !byte   $10                  ; bits left
        !byte   $20                  ; bits fetched
        !word   515                  ; count of entries
;D words
        !word   all+$8ad             ; offset
        !byte   $04                  ; bits left
        !byte   $34                  ; bits fetched
        !word   381                  ; count of entries
;E words
        !word   all+$a8d             ; offset
        !byte   $10                  ; bits left
        !byte   $30                  ; bits fetched
        !word   175                  ; count of entries
;F words
        !word   all+$ba3             ; offset
        !byte   $08                  ; bits left
        !byte   $20                  ; bits fetched
        !word   303                  ; count of entries
;G words
        !word   all+$d33             ; offset
        !byte   $02                  ; bits left
        !byte   $22                  ; bits fetched
        !word   357                  ; count of entries
;H words
        !word   all+$ef5             ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   276                  ; count of entries
;I words
        !word   all+$105c            ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   099                  ; count of entries
;J words
        !word   all+$10fa            ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   133                  ; count of entries
;K words
        !word   all+$11b3            ; offset
        !byte   $10                  ; bits left
        !byte   $30                  ; bits fetched
        !word   225                  ; count of entries
;L words
        !word   all+$1300            ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   336                  ; count of entries
;M words
        !word   all+$149a            ; offset
        !byte   $20                  ; bits left
        !byte   $20                  ; bits fetched
        !word   371                  ; count of entries
;N words
        !word   all+$165d            ; offset
        !byte   $40                  ; bits left
        !byte   $00                  ; bits fetched
        !word   186                  ; count of entries
;O words
        !word   all+$1760            ; offset
        !byte   $10                  ; bits left
        !byte   $30                  ; bits fetched
        !word   160                  ; count of entries
;P words
        !word   all+$186c            ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   471                  ; count of entries
;Q words
        !word   all+$1aa4            ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   041                  ; count of entries
;R words
        !word   all+$1ae2            ; offset
        !byte   $08                  ; bits left
        !byte   $30                  ; bits fetched
        !word   355                  ; count of entries
;S words
        !word   all+$1c9d            ; offset
        !byte   $02                  ; bits left
        !byte   $26                  ; bits fetched
        !word   877                  ; count of entries
;T words
        !word   all+$20b2            ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   471                  ; count of entries
;U words
        !word   all+$22fa            ; offset
        !byte   $10                  ; bits left
        !byte   $20                  ; bits fetched
        !word   111                  ; count of entries
;V words
        !word   all+$23a3            ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   132                  ; count of entries
;W words
        !word   all+$245a            ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   218                  ; count of entries
;X words
        !word   all+$2572            ; offset
        !byte   $80                  ; bits left
        !byte   $00                  ; bits fetched
        !word   013                  ; count of entries
;Y words
        !word   all+$2589            ; offset
        !byte   $02                  ; bits left
        !byte   $36                  ; bits fetched
        !word   099                  ; count of entries
;Z words
        !word   all+$2618            ; offset
        !byte   $00                  ; bits left
        !byte   $00                  ; bits fetched
        !word   060                  ; count of entries

vet
!bin "res/vet.bin"
all
!bin "res/all.bin"
