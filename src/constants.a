;license:MIT
;(c) 2022 by 4am
;

;------------------------------------------------------------------------------
; YE OLDE GRAND UNIFIED MEMORY MAP
;
; DURING BOOT
; 0000..00E9 - 0boot code
; 00EA..00F8 - application code (WaitForKey)
; 00F9..00FC - application data
; 00FD..00FF - unused
; 0100..0155 - 0boot data (2-bit array)
; 0156..01BF - 0boot data (preshift array)
; 01C0..01CB - application code (DisplayProgress)
; 01CC..01FF - 0boot stack
; 0200..02FF - 0boot data (grouped array)
; 0800..09FF - boot code as read from disk

; DURING GAMEPLAY
; 0000..0003 - temporary pointers and counters
; 0004..001F - unused
; 0020..0039 - used by ROM for text output (could find a few unused locations if necessary)
; 003A..004D - unused
; 004E..004F - random seed (updated by WaitForKey, could be moved if necessary)
; 0050..00E9 - globals (copied from page 3 during gameplay)
; 00EA..00F8 - application code (WaitForKey, persists from boot phase)
; 00F9..00FC - application data (ProgressIndicators, persists from boot phase)
; 00FD..01BF - unused
; 01C0..01CB - application code (DisplayProgress, persists from boot phase)
; 01CC..01FF - application stack
; 0200..0267 - clobbered by nth() and exists()
; 0268..02FF - unused
; 0300..03FF - application code and strings
; 0400..07F7 - text page
; 07F8..0C8E - application code
; 0C8F..3FFF - application data (compressed word lists)
;------------------------------------------------------------------------------

; soft switches
KBD =          $C000      ; last key pressed (if any)
CLEARKBD =     $C010      ; clear last key pressed

; ROM routines and addresses
TEXTTOP      = $22        ; byte
TEXTBOTTOM   = $23        ; byte
HTAB         = $24        ; byte
VTAB         = $25        ; byte
RNDSEED      = $4E        ; word
ROM_TEXT =     $FB2F
ROM_TEXT_RECALC = $FC22
ROM_HOME =     $FC58
ROM_WAIT =     $FCA8
ROM_PRINT =    $FDF0
ROM_NORMAL =   $FE84      ; NORMAL text (instead of INVERSE or FLASH)
ROM_IN0 =      $FE89      ; SETKBD
ROM_PR0 =      $FE93      ; SETVID

; application-specific addresses and constants
CR =           $8D        ; carriage return
QQ =           $A2        ; quotation mark

ptr          = $00        ; word
counter      = $02        ; byte
gProgressIndicatorIndex = $03 ; byte
WaitForKey   = $00EA
kProgressIndicators = $F9
DisplayProgress = $1C0

tempstor=$200 ;requires 26*tblsize(4) bytes

table_size=5 ;from bin file
word_size=5 ;from bin file
num_tables=6 ;from bin file

nstore=RNDSEED ;16-bit
locstore=$e7 ;16-bit
state=$e3 ;4 bytes struct
offset=$e3
left=$e5
fetched=$e6
statesize=4

value=$e1 ;16-bit
num_items=$e0
index=$df
tblptr=$dd ;16-bit
buf=$db ;16-bit
tbl0ptr=$d9 ;16-bit
tbl5ptr=$d7 ;16-bit
depth=$d6
num_children=$d5
preflen=$d4
prefix=$ca ;word_size * 2 bytes
bits=$c9

;structure members
offset_off=0 ;16-bit
left_off=2
fetched_off=3
count_off=4 ;16-bit
locsize=6

value_off=0
bits_off=1
key_off=2 ;16-bit
tblsize=4
